<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>Controller</title>

    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" rel="stylesheet">
    <style>
		.current_time, .current_duration {
			font-family : 'Courier New';
		}
    </style>
  </head>

  <body>

    <div class="container" style="margin-top:15%">
    	<h4 id="current_playing"></h4>
    	<a class="btn btn-primary glyphicon glyphicon-play" id="play"></a>
    	<a class="btn btn-info glyphicon glyphicon-pause" id="pause"></a>
    	<a class="btn btn-danger glyphicon glyphicon-step-forward" id="next"></a>
    	<a class="btn btn-danger glyphicon glyphicon-refresh" id="refresh"></a>
    	<a class="btn btn-danger glyphicon glyphicon-remove-sign" id="close_browser" data-target="tooltip" data-original-title="Close Video Player"></a>
    	<hr />
		<input type="range" id="duration" min="10" value="10" max="2000" step="100">
		<span class="current_time"></span> / 
		<span class="current_duration"></span>
		<hr />
		<div class="input-group">
	      <input type="text" class="form-control" placeholder="Play URL" id="play_url_string">
	      <span class="input-group-btn">
	        <button class="btn btn-primary" id="play_url" type="button"><i class="glyphicon glyphicon-play"></i></button>
	      </span>
	    </div><!-- /input-group -->
	    <div class="checkbox">
	    	<label>
	    		<input type="checkbox" value="is_youtube" id="is_youtube">
	    		Youtube Video
	    	</label>
	    </div>
		<hr />
		<div class="list-group" id="playlist" style="margin-top: 5%;height: 400px;overflow: auto;">
		</div>
    </div>

    <script src="/list?callback=update_playlist"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>
	<script src="/socket.io/socket.io.js"></script>
	<script src="/scripts/moment/min/moment.min.js"></script>
    <script src="/scripts/underscore/underscore.js"></script>
	<script>
		$(document).ready(function(){
			$('[data-target="tooltip"]').tooltip();
		});

		socket = io();
		playlist = [];
		current_playing = {
			src : ""
		};
		function notify(msg) {

		  if (Notification.permission !== "granted")
		    Notification.requestPermission();
		  else {
		    var notification = new Notification('Era Player', {
		      icon: 'https://cdn3.iconfinder.com/data/icons/iconic-1/32/play_alt-512.png',
		      body: msg
		    });
		     setTimeout(notification.close.bind(notification), 2000); 
		  }

		}

		function toTime(time){
			return moment("1900-01-01 00:00:00").add(time, 'seconds').format("mm:ss")
		}

		function update_playlist(list){
			playlist = list;
			_.each(playlist, item => {
				item = item.sources[0];

				let src = sanitizeSrc(item.src);
				let li = $(`
					<a href="#" class="list-group-item">
						<h4 class="list-group-item-heading">`+ src +`</h4>
					</a>
				`);

				$('#playlist').append(li);

				li.on('click', function(e){
					socket.emit('controller', {
						type : 'source_update',
						value : {
							src : item.src,
							type : item.type
						}
					});
				})
			});
		}

		function execJSONP(url, cb) {
		    var script = document.createElement('script');
		    script.async = true;
		    var callb = 'exec'+Math.floor((Math.random()*65535)+1);
		    window[callb] = function(data) {
		        var scr = document.getElementById(callb);
		        scr.parentNode.removeChild(scr);
		        cb(data);
		        window[callb] = null;
		        delete window[callb];
		    }
		    var sepchar = (url.indexOf('?') > -1)?'&':'?';
		    script.src = url+sepchar+'callback='+callb;
		    script.id = callb;
		    document.getElementsByTagName('head')[0].appendChild(script);
		}

		function sanitizeSrc(fname){
			let host = window.location.href.replace('controller', '').replace('#','');
			return decodeURI(fname)
			.replace(host,'')
			.replace('.mp4','')
			.replace('.MP4','')
			.replace('.avi','')
			.replace(/\%2B/ig,'+')
			.replace('/', '')
			.replace('_xvid','');
		}

		socket.on('timeupdate', function(data){
			$('#duration').attr('min', 0);
			$('#duration').attr('max', data.progress.duration);
			$('#duration').attr('step', 0.00000001);
			$('#duration').val(data.progress.current_time);

			let current_time = toTime(data.progress.current_time);
			let current_duration = toTime(data.progress.duration);

			$('.current_time').text(current_time);
			$('.current_duration').text(current_duration);

			current_playing = data.playing;


			if($('#current_playing').text() !== sanitizeSrc(current_playing.src)){
				notify(sanitizeSrc(current_playing.src) + " is currently playing");
			}

			$('#current_playing').text(sanitizeSrc(current_playing.src));

			let time_rcvd = moment().unix();
			let time_sent_from_server = data.time_sent;
			let time_spent = time_rcvd - time_sent_from_server;
			console.log('Time Spent', time_spent, time_rcvd, data.time_sent);

		});
		
		socket.on('controller', function(data){
			switch(data.type){
				case 'playlist' :
					playlist = data.data;

					update_playlist();

					break;
				case 'seek' :
					break;
				case 'control' :
					break;
				case 'source_update':
					break;
				default:
					console.log('unknown', data);
					break;
			}
		});

		$('#duration').on('input', e=>{
			let current_time = toTime(parseFloat($('#duration').val()));
			$('.current_time').text(current_time);

			socket.emit('controller', {
				type : 'seek',
				value : parseFloat($('#duration').val())
			});
		});

		
		execJSONP('/list', update_playlist);


		// ** buttons ** //

		$('#play').on('click', function(e){
			socket.emit('controller', {
				type : 'control',
				value : 'play'
			});
		});
		$('#pause').on('click', function(e){
			socket.emit('controller', {
				type : 'control',
				value : 'pause'
			});
		});
		$('#next').on('click', function(e){
			socket.emit('controller', {
				type : 'control',
				value : 'next'
			});
		});

		$('#play_url').on('click', function(e){
			let url = $('#play_url_string').val();
			if(url != ""){
				socket.emit('controller', {
					type : 'source_update',
					value : {
						src : url,
						type : ($('#is_youtube').is(":checked")) ? "video/youtube" : 'video/mp4'
					}
				});
			}
		});

		$('#refresh').on('click', e=>{
			socket.emit('controller', {
				type : 'control',
				value : 'refresh'
			});
		})

		$('#close_browser').on('click', e=>{
			socket.emit('controller', {
				type : 'control',
				value : 'close_browser'
			});
		})
	</script>

  </body>
</html>
